#Resolution based botting depending on the game's screen resolution
#Pros: 100% undetectable with random number generation gaps and varied coordinates clicking.
#cons: time consuming to code, pathing errors can compound heavily so going to long distances are not viable.
import pyautogui 
import time
import random
#copper and tin ore coordinates
copper1_x = 740
copper1_y = 528

copper2_x = 665
copper2_y = 532

move_tinx = 557
move_tiny = 465

tin1_x = 702
tin1_y = 493

tin2_x = 662
tin2_y = 531

#path to bank and to mining area
path1_x = 1007
path1_y = 67

path2_x = 659
path2_y = 35

path3_x = 440
path3_y = 57

path4_x = 110
path4_y = 436

path5_x = 260
path5_y = 586

path6_x = 1389
path6_y = 132

path7_x = 1326
path7_y = 180

path8_x = 1310
path8_y = 136

path9_x = 1310
path9_y = 136

path10_x = 706
path10_y = 681

#Time to mine, adjust depending on your pickaxe and mining level (lower if better pick axe)
pickaxe_time = 11


def perform_click(fast):

    time.sleep(1 + random.uniform(.1, .3))
    pyautogui.mouseDown(pyautogui.position())
    time.sleep(random.uniform(.1, .15))
    pyautogui.mouseUp(pyautogui.position())
#single click for movement otherwise double click
    if fast == True:
        return
    else:
        time.sleep(random.uniform(.2, .3))
        pyautogui.mouseDown(pyautogui.position())
        time.sleep(random.uniform(.1, .15))
        pyautogui.mouseUp(pyautogui.position())

#move mouse, for pathing reduce pixel error to 1 pixel, errors compound heavily for pathing.
def move_mouse(end_x, end_y, path):
    
    start_x, start_y = pyautogui.position()
    #set as many intermediate points as you want, 2 should be enough
    intermediate_points = [(random.randint(10,1900), random.randint(10, 1000)) for _ in range(2)]

    if path == True:
        path = [(start_x, start_y)] + intermediate_points + [(end_x + random.uniform(-1, 1), end_y + random.uniform(-1, 1))]
    else:
        path = [(start_x, start_y)] + intermediate_points + [(end_x + random.uniform(-5, 5), end_y + random.uniform(-5, 5))]

    #duration of the movement start to finish, 1
    segment_duration = 1/len(path)

    for x, y in path:
        pyautogui.moveTo(x, y, duration=segment_duration)
        time.sleep(segment_duration)


def bank_items():
    x = 0

def mining(ore1_x, ore1_y, ore2_x, ore2_y):
    for _ in range(7):
        move_mouse(ore1_x, ore1_y)
        time.sleep(random.uniform(.1, .2))
        perform_click(False)
        time.sleep(random.uniform(pickaxe_time, pickaxe_time+1))
        move_mouse(ore2_x, ore2_y)
        time.sleep(random.uniform(.1, .2))
        perform_click(False)
        time.sleep(random.uniform(pickaxe_time, pickaxe_time+1))



#mining(copper1_x, copper1_y, copper2_x, copper2_y)
#move_mouse(move_tinx, move_tiny)
#perform_click(True)
#mining(tin1_x, tin1_y, tin2_x, tin2_y)

move_mouse(path1_x, path1_y, True)
perform_click(True)
time.sleep(15)
move_mouse(path2_x, path2_y, True)
perform_click(True)
time.sleep(15)
move_mouse(path3_x, path3_y, True)
perform_click(True)
time.sleep(15)
move_mouse(path4_x, path4_y, True)
perform_click(True)
time.sleep(15)
move_mouse(path5_x, path5_y, True)
perform_click(True)
time.sleep(15)
move_mouse(path6_x, path6_y, True)
perform_click(True)
time.sleep(15)
move_mouse(path7_x, path7_y, True)
perform_click(True)
time.sleep(15)
move_mouse(path8_x, path8_y, True)
perform_click(True)
time.sleep(15)
move_mouse(path9_x, path9_y, True)
perform_click(True)
time.sleep(15)
move_mouse(path10_x, path10_y, True)
perform_click(True)
time.sleep(15)
